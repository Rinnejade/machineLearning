#!/usr/bin/env python
import cv2
import numpy as np
import os
from matplotlib import pyplot as plt

img = cv2.imread('digits.png', cv2.IMREAD_GRAYSCALE)
x = np.array([np.hsplit(row, 100) for row in np.vsplit(img, 50)])
k = np.arange(10)

if not os.path.exists('knn_data.npz'):
    train = x[:, :].reshape(-1, 400).astype(np.float32)
    train_labels = np.repeat(k, 500)[:np.newaxis]
    np.savez('knn_data.npz', train=train, train_labels=train_labels)


with np.load('knn_data.npz') as data:
    train = data['train']
    train_labels = data['train_labels']
    test_labels = train_labels.copy()
    test = x[:, :].reshape(-1, 400).astype(np.float32)

    knn = cv2.ml.KNearest_create()
    knn.train(train, cv2.ml.ROW_SAMPLE, train_labels)
    one = cv2.imread('a.png', cv2.IMREAD_GRAYSCALE).astype(np.float32)
    a= knn.findNearest(one, k=3)
    print(a)
    ret, result, neightbours, dist = knn.findNearest(test, k=3)

    correct = 0
    total = 0
    for r, t in zip(result, test_labels):
        if(r == t):
            correct += 1
        total += 1
    print(correct / total * 100.0)

# cap = cv2.VideoCapture(0)
# while True:
    # ret, frame = cap.read()
    # ret, thres = cv2.threshold(frame, 127, 255, cv2.THRESH_BINARY_INV)
#     cut = thres
    # cv2.imshow('test', frame)
    # if (cv2.waitKey(1) & 0xFF == ord('q')):
        # break
# cap.release()
# cv2.destroyAllWindows()
